import Head from 'next/head'
import { useRef, useState, useEffect } from 'react'
import fuzzysort from 'fuzzysort'
import { Record } from '@/lib/record'
import { truncate } from 'fs'
import Events from '@/lib/events'
import useRecords, { getServerRecords } from '@/lib/useRecords'

// const FilterCard = ({
//   filterKey,
//   setFilter,
//   removeFilter
// }: {
//   filterKey: string;
//   setFilter: (key: string, check: FilterCheck) => void;
//   removeFilter: (key: string) => void;
// }) => {
//   const inputRef = useRef<HTMLInputElement>(null);
//   const [text, setText] = useState('');
//   const id = useId();

//   return (
//     <section style={{
//       cursor: 'text'
//     }} onClick={() => {
//       if (document.activeElement?.id !== id) {
//         inputRef?.current?.focus?.()
//       }
//     }}>
//       <h2>Search by Name</h2>
//       <input id={id} ref={inputRef} type="text" placeholder="Name" value={text} onChange={e => {
//         if (e.target.value) {
//           setFilter(filterKey, (value: string) => value.toLowerCase().includes(e.target.value.toLowerCase()));
//         } else {
//           removeFilter(filterKey);
//         }
//         setText(e.target.value);
//       }} />
//     </section>
//   )
// }


// type FilterCheck = (value: any) => boolean;

// interface Filter {
//   key: string;
//   check: FilterCheck;
// }

// type FilterObject = {[key: string]: Filter};

// const thing: FilterObject = {
//   name: {
//     key: 'name',
//     check: (value: string) => true
//   }
// }

// function useFilter (data: Record[]) {
//   const [filters, setFilters] = useState<FilterObject>({});
//   const [filteredData, setFilteredData] = useState(data);

//   const setFilter = (key: string, check: FilterCheck) => {
//     setFilters({
//       ...filters,
//       [key]: {
//         key,
//         check
//       }
//     });
//   }

//   const removeFilter = (key: string) => {
//     setFilters({
//       ...filters,
//       [key]: {
//         key,
//         check: () => true
//       }
//     });
//   }

//   useEffect(() => {
//     setFilteredData(data.filter(record => {
//       for (const filter of Object.values(filters)) {
//         if (!filter.check((record as any)[filter.key])) return false;
//       }
//       return true;
//     }));
//   }, [filters, data]);

//   return [filteredData, setFilter, removeFilter];
// }

/*
--------------------
We should:
  - hide users that have been checked in - unless searched for
  - leaders have special tote bags; have an indicator showing whether someone is a leader or not
--------------------
*/

export default function Home({ serverRecords }: { serverRecords: Record[] }) {
  const [records] = useRecords({ serverRecords });
  const data = records.filter((record: Record) => !record.checkedIn);
  const checkedInRendered = records.filter((record: Record) => record.checkedIn);

  const [nameFilter, setNameFilter] = useState('');

  const [selectedPod, setSelectedPod] = useState('Green Pod');

  const [selectedIds, setSelectedIds] = useState<string[]>([]);
  const unselected = data.filter(record => !selectedIds.includes(record.id));
  const selected = data.filter(record => selectedIds.includes(record.id));

  const inputRef = useRef<HTMLInputElement>(null);

  const podSizes = {
    green: records.filter((record: Record) => record.pod == "Green Pod").length,
    blue: records.filter((record: Record) => record.pod == "Blue Pod").length,
    purple: records.filter((record: Record) => record.pod == "Purple Pod").length,
    pink: records.filter((record: Record) => record.pod == "Pink Pod").length,
    red: records.filter((record: Record) => record.pod == "Red Pod").length,
    orange: records.filter((record: Record) => record.pod == "Orange Pod").length,
    yellow: records.filter((record: Record) => record.pod == "Yellow Pod").length
  };

  useEffect(() => {
    const availablePods = Object.keys(podSizes).filter(key => (podSizes as any)[key] < 20);
    const transformed = availablePods.map(key => (
      key === 'green' ? 'Green Pod' :
      key === 'blue' ? 'Blue Pod' :
      key === 'purple' ? 'Purple Pod' :
      key === 'pink' ? 'Pink Pod' :
      key === 'red' ? 'Red Pod' :
      key === 'orange' ? 'Orange Pod' :
      key === 'yellow' ? 'Yellow Pod' : null
    ));
    if (!transformed.includes(selectedPod as any)) {
      setSelectedPod((transformed as any)[0]);
    }
  }, [Object.values(podSizes).join(',')]);

  const renderedAvailable = nameFilter ? fuzzysort.go(nameFilter, unselected, {
    key: 'name'
  }).map(result => ({
    ...result.obj,
    renderedName: fuzzysort.highlight(result, (m, i) => <b key={i} className="highlighted" data-content={m}>{m}</b>)
  })) : unselected;

  const truncatedAvailable = renderedAvailable.slice(0, 6);

  const renderedSelected = selected;

  return (
    <>
      <Head>
        <title>Outernet Check-In</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

          <h2><span style={{ color: "#ff1a1a" }}>NOTICE</span>: IF YOU HAVE DIETRY NEEDS, PLEASE TALK TO LANI - THE CHEF IN THE KITCHEN</h2>
        <div/>
        <h1>Outernet Check-In</h1>
        
        <section style={{
          cursor: 'text'
        }}>
          <h2>Search by Name</h2>
          <input ref={inputRef} type="text" placeholder="Name" value={nameFilter} onChange={e => setNameFilter(e.target.value)} onKeyDown={e => {
            if (e.key !== "Enter") return;
            inputRef.current?.select();
            if (selectedIds.includes(renderedAvailable[0].id)) {
              setSelectedIds(selectedIds.filter(id => id !== renderedAvailable[0].id));
            } else {
              setSelectedIds([...selectedIds, renderedAvailable[0].id]);
            }
          }} />
        </section>

        <h2>Available ({renderedAvailable.length})</h2>
        <table>
          <thead>
            <tr>
              <th style={{
                width: '36px'
              }}></th>
              <th style={{
                width: '400px'
              }}>Name</th>
              <th>Pod</th>
              <th>Leader</th>
              <th>Checked In</th>
            </tr>
          </thead>
          <tbody>
            {truncatedAvailable.map(record => (
              <tr key={record.id} style={{
                cursor: 'pointer',
                ...(record.checkedIn ? {
                  backgroundColor: '#ccffdd'
                } : {})
              }} onClick={() => {
                if (selectedIds.includes(record.id)) {
                  setSelectedIds(selectedIds.filter(id => id !== record.id));
                } else {
                  setSelectedIds([...selectedIds, record.id]);
                }
              }}>
                <td style={{
                  width: '36px'
                }}>âž•</td>
                <td>{record.renderedName || record.name}</td>
                <td>{record.pod}</td>
                <td>{record.isLeader ? <span className="green">Yes</span> : 'No'}</td>
                <td>{record.checkedIn ? 'Yes' : 'No'}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {truncatedAvailable.length === 0 ? (
          <center>
            <h3 style={{
              color: 'var(--text-muted)',
              marginTop: '3rem',
              marginBottom: '3rem'
            }}>No Results</h3>
            <hr />
          </center>
        ) : (renderedAvailable.length - truncatedAvailable.length >= 1 ? (
          <center>
            <h3 style={{
              color: 'var(--text-muted)',
              marginTop: '2rem',
              marginBottom: '2rem'
            }}>+{renderedAvailable.length - truncatedAvailable.length} more</h3>
            <hr />
          </center>
        ) : (
          <div style={{
            marginBottom: '4rem'
          }}></div>
        ))}

        <div style={{
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'top'
        }} className="headerSpacing">
          <h2 className="ignoreHeaderSpacing">
            Selected ({renderedSelected.length})
          </h2>
          <span style={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'flex-end',
            alignItems: 'center'

          }}>
            <select name="pod" value={selectedPod} onChange={e => setSelectedPod(e.target.value)}>
              <option value="Green Pod" disabled={podSizes.green >= 20}>ðŸŸ¢ Green Pod ({podSizes.green})</option>
              <option value="Blue Pod" disabled={podSizes.blue >= 20}>ðŸ”µ Blue Pod ({podSizes.blue})</option>
              <option value="Purple Pod" disabled={podSizes.purple >= 20}>ðŸŸ£ Purple Pod ({podSizes.purple})</option>
              <option value="Pink Pod" disabled={podSizes.pink >= 20}>ðŸ’– Pink Pod ({podSizes.pink})</option>
              <option value="Red Pod" disabled={podSizes.red >= 20}>ðŸ”´ Red Pod ({podSizes.red})</option>
              <option value="Orange Pod" disabled={podSizes.orange >= 20}>ðŸŸ  Orange Pod ({podSizes.orange})</option>
              <option value="Yellow Pod" disabled={podSizes.yellow >= 20}>ðŸŸ¡ Yellow Pod ({podSizes.yellow})</option>
            </select>
            <button className="error" style={{
              marginRight: '0.75rem',
              display: 'inline-flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              height: '39px',
            }} onDoubleClick={() => {
              setSelectedIds([]);
            }}><span>Clear</span><span style={{
              fontSize: '0.6rem'
            }}>Double Click</span></button>
            <button className="success" onClick={async () => {
              const ids = renderedSelected.map((record: Record) => record.id);
              console.log({ ids });
              await Events.checkInGroup(ids, "Blue Pod");
              await fetch("/api/records", {
                method: "PATCH",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  pod: selectedPod,
                  ids: ids,
                })
              });
              setSelectedIds([]);
            }}>Check In</button>
          </span>
        </div>

        <table style={{
          marginBottom: '6rem'
        }}>
          <thead>
            <tr>
              <th style={{
                width: '36px'
              }}></th>
              <th style={{
                width: '400px'
              }}>Name</th>
              <th>Pod</th>
              <th>Leader</th>
              <th>Checked In</th>
            </tr>
          </thead>
          <tbody>
            {renderedSelected.map(record => (
              <tr key={record.id} style={{
                cursor: 'pointer',
                ...(record.checkedIn ? {
                  backgroundColor: '#ccffdd'
                } : {})
              }} onClick={() => {
                if (selectedIds.includes(record.id)) {
                  setSelectedIds(selectedIds.filter(id => id !== record.id));
                } else {
                  setSelectedIds([...selectedIds, record.id]);
                }
              }}>
                <td style={{
                  width: '36px'
                }}>âž–</td>
                <td>{record.renderedName || record.name}</td>
                <td>{record.pod}</td>
                <td>{record.isLeader ? <span className="green">âœ… Yes</span> : 'No'}</td>
                <td>{record.checkedIn ? 'Yes' : 'No'}</td>
              </tr>
            ))}
          </tbody>
        </table>


        <h2>Checked-In ({checkedInRendered.length})</h2>
        <table style={{
          marginBottom: '6rem'
        }}>
          <thead>
            <tr>
              <th style={{
                width: '36px'
              }}></th>
              <th style={{
                width: '400px'
              }}>Name</th>
              <th>Pod</th>
              <th>Leader</th>
              <th>Checked In</th>
            </tr>
          </thead>
          <tbody>
            {checkedInRendered.map(record => (
              <tr key={record.id} style={{
                cursor: 'pointer',
                ...(record.checkedIn ? {
                  backgroundColor: '#ccffdd'
                } : {})
              }}>
                <td style={{
                  width: '36px'
                }}>âœ…</td>
                <td>{record.renderedName || record.name}</td>
                <td>{record.pod}</td>
                <td>{record.isLeader ? <span className="green">âœ… Yes</span> : 'No'}</td>
                <td>{record.checkedIn ? 'Yes' : 'No'}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </main>
    </>
  )
}

export async function getServerSideProps() {
  return {
    props: { serverRecords: await getServerRecords() }
  };
}



// hi